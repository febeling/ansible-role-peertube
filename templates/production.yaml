---
listen:
  hostname: 'localhost'
  port: 9000

# Correspond to your reverse proxy server_name/listen configuration
webserver:
  https: true
  hostname: 'peertube.crypto-libertarian.com'
  port: 443

rates_limit:
  api:
    # 50 attempts in 10 seconds
    window: 10 seconds
    max: 50
  login:
    # 15 attempts in 5 min
    window: 5 minutes
    max: 15
  signup:
    # 2 attempts in 5 min (only succeeded attempts are taken into account)
    window: 5 minutes
    max: 2
  ask_send_email:
    # 3 attempts in 5 min
    window: 5 minutes
    max: 3

# Proxies to trust to get real client IP. If you run PeerTube just behind
# a local proxy (nginx), keep 'loopback'. If you run PeerTube behind a remote
# proxy, add the proxy IP address (or subnet).
trust_proxy:
  - 'loopback'

# Your database name will be "peertube"+database.suffix
database:
  hostname: 'localhost'
  port: 5432
  suffix: ''
  username: 'peertube'
  password: 'password'
  pool:
    max: 5

# Redis server for short time storage
# You can also specify a 'socket' path to a unix socket but first need to
# comment out hostname and port
redis:
  hostname: 'localhost'
  port: 6379
  auth: null
  db: 0

# SMTP server to send emails
smtp:
  # smtp or sendmail
  transport: smtp
  # Path to sendmail command. Required if you use sendmail transport
  sendmail: null
  hostname: null
  port: 465  # If you use StartTLS: 587
  username: null
  password: null
  tls: true  # If you use StartTLS: false
  disable_starttls: false
  ca_file: null  # Used for self signed certificates
  from_address: 'admin@example.com'

email:
  body:
    signature: "PeerTube"
  subject:
    prefix: "[PeerTube]"

# From the project root directory
storage:
  tmp: '/var/www/peertube/storage/tmp/'
  avatars: '/var/www/peertube/storage/avatars/'
  videos: '/var/www/peertube/storage/videos/'
  streaming_playlists: '/var/www/peertube/storage/streaming-playlists/'
  redundancy: '/var/www/peertube/storage/redundancy/'
  logs: '/var/www/peertube/storage/logs/'
  previews: '/var/www/peertube/storage/previews/'
  thumbnails: '/var/www/peertube/storage/thumbnails/'
  torrents: '/var/www/peertube/storage/torrents/'
  captions: '/var/www/peertube/storage/captions/'
  cache: '/var/www/peertube/storage/cache/'
  plugins: '/var/www/peertube/storage/plugins/'

log:
  level: 'info'  # debug/info/warning/error
  anonymizeIP: false
  rotation:
    # Enabled by default, if disabled make sure that 'storage.logs' is pointing
    # to a folder handled by logrotate.
    enabled: true

    maxFileSize: 12MB
    maxFiles: 20

search:
  # Add ability to fetch remote videos/actors by their URI, that may not
  # be federated with your instance. If enabled, the associated group will
  # be able to "escape" from the instance follow. That means they will be able
  # to follow channels, watch videos, list videos of non followed instance.
  remote_uri:
    users: true
    anonymous: false

trending:
  videos:
    interval_days: 7  # Compute trending videos for the last x days.

# Cache remote videos on your server, to help other instances to broadcast
# the video. You can define multiple caches using different sizes/strategies.
# Once you have defined your strategies, choose which instances you want
# to cache in admin -> manage follows -> following.
redundancy:
  videos:
    check_interval: '1 hour'  # How often you want to check new videos to cache.

    # Just uncomment strategies you want.
    strategies:
#      - size: '10GB'
#        strategy: 'most-views' # Cache videos that have the most views
#
#        # Minimum time the video must remain in the cache.
#        # Only accept values > 10 hours (to not overload remote instances).
#        min_lifetime: '48 hours'
#
#      - size: '10GB'
#        strategy: 'trending' # Cache trending videos
#
#        # Minimum time the video must remain in the cache.
#        # Only accept values > 10 hours (to not overload remote instances).
#        min_lifetime: '48 hours'
#
#      - size: '10GB'
#        strategy: 'recently-added'  # Cache recently added videos
#        min_views: 10  # Having at least x views
#
#        # Minimum time the video must remain in the cache.
#        # Only accept values > 10 hours (to not overload remote instances).
#        min_lifetime: '48 hours'

# Other instances that duplicate your content
remote_redundancy:
  videos:
    # 'nobody': Do not accept remote redundancies
    # 'anybody': Accept remote redundancies from anybody
    # 'followings': Accept redundancies from instance followings
    accept_from: 'anybody'

csp:
  enabled: false
  report_uri:

  # CSP directives are still being tested, so disable the report only mode
  # at your own risk!
  report_only: true

tracker:
  # If you disable the tracker, you disable the P2P aspect of PeerTube
  enabled: true

  # Only handle requests on your videos. If you set this to false it means
  # you have a public tracker. Then, it is possible that clients overload
  # your instance with external torrents.
  private: true

  # Reject peers that do a lot of announces
  # (could improve privacy of TCP/UDP peers).
  reject_too_many_announces: false

history:
  videos:
    # If you want to limit users videos history.
    # -1 means there is no limitations.
    # Other values could be '6 months' or '30 days' etc
    # (PeerTube will periodically delete old entries from database).
    max_age: -1

views:
  videos:
    # PeerTube creates a database entry every hour for each video to track
    # views over a period of time. This is used in particular by the Trending
    # page. PeerTube could remove old remote video views if you want to reduce
    # your database size (video view counter will not be altered). -1 means
    # no cleanup. Other values could be '6 months' or '30 days' etc
    # (PeerTube will periodically delete old entries from database).
    remote:
      max_age: -1

plugins:
  # The website PeerTube will ask for available PeerTube plugins and themes.
  # This is an unmoderated plugin index, so only install plugins/themes
  # you trust.
  index:
    enabled: true
    url: 'https://packages.joinpeertube.org'

    # How often you want to check new plugins/themes versions>
    check_latest_versions_interval: '12 hours'


###############################################################################
#
# From this point, all the following keys can be overridden by the web interface
# (local-production.json file). If you need to change some values, prefer to
# use the web interface because the configuration will be automatically
# reloaded without any need to restart PeerTube.
#
# /!\ If you already have a local-production.json file, the modification of the
# following keys will have no effect /!\.
#
###############################################################################

cache:
  previews:
    # Max number of previews you want to cache.
    size: 500
  captions:
    # Max number of video captions/subtitles you want to cache.
    size: 500

admin:
  # Used to generate the root user at first startup.
  # and to receive emails from the contact form.
  email: 'kotovalexarian@gmail.com'

contact_form:
  enabled: true

signup:
  enabled: false

  # When the limit is reached, registrations are disabled. -1 == unlimited
  limit: 10

  requires_email_verification: false

  filters:
    # You can specify CIDR ranges to whitelist (empty = no filtering)
    # or blacklist.
    cidr:
      whitelist: []
      blacklist: []

user:
  # Default value of maximum video BYTES the user can upload (does not take
  # into account transcoded files). -1 == unlimited
  video_quota: -1
  video_quota_daily: -1

# If enabled, the video will be transcoded to mp4 (x264) with "faststart" flag.
# In addition, if some resolutions are enabled the mp4 video file will
# be transcoded to these new resolutions. Please, do not disable transcoding
# since many uploaded videos will not work.
transcoding:
  enabled: true

  # Allow your users to upload .mkv, .mov, .avi, .flv videos.
  allow_additional_extensions: true

  # If a user uploads an audio file, PeerTube will create a video by merging
  # the preview file and the audio file.
  allow_audio_files: true

  threads: 1

  # Only created if the original video has a higher resolution,
  # uses more storage!
  resolutions:
    # audio-only (creates mp4 without video stream, always created when enabled)
    0p: true
    240p: true
    360p: true
    480p: true
    720p: true
    1080p: true
    2160p: true

  # Generate videos in a WebTorrent format (what we do since the first PeerTube
  # release). If you also enabled the hls format, it will multiply videos
  # storage by 2. If disabled, breaks federation with PeerTube instances < 2.1.
  webtorrent:
    enabled: true

  # /!\ Requires ffmpeg >= 4.1
  # Generate HLS playlists and fragmented MP4 files.
  # Better playback than with WebTorrent:
  #   * Resolution change is smoother
  #   * Faster playback in particular with long videos
  #   * More stable playback (less bugs/infinite loading)
  # If you also enabled the webtorrent format, it will multiply videos storage
  # by 2.
  hls:
    enabled: true

import:
  # Add ability for your users to import remote videos
  # (from YouTube, torrent...).
  videos:
    # Classic HTTP or all sites supported by youtube-dl.
    # https://rg3.github.io/youtube-dl/supportedsites.html
    http:
      enabled: true

      # You can use an HTTP/HTTPS/SOCKS proxy with youtube-dl.
      proxy:
        enabled: false
        url: ''

    # Magnet URI or torrent file (use classic TCP/UDP/WebSeed to download
    # the file).
    torrent:
      enabled: true

auto_blacklist:
  # New videos automatically blacklisted so moderators can review before
  # publishing.
  videos:
    of_users:
      enabled: false

# Instance settings
instance:
  name: 'Crypto-Libertarian PeerTube'

  short_description: 'Welcome to the PeerTube instance of the Crypto-Libertarian project.'

  # Supports Markdown
  description: 'Welcome to the PeerTube instance of the [Crypto-Libertarian](https://crypto-libertarian.com) project. PeerTube is a federated (ActivityPub) video streaming platform using P2P (BitTorrent) directly in the web browser with WebTorrent and Angular.'

  # Supports Markdown
  terms: 'No user registration therefore no rules.'

  # Supports Markdown
  code_of_conduct: ''

  # Who moderates the instance? What is the policy regarding NSFW videos?
  # Political videos? etc
  # Supports Markdown
  moderation_information: ''

  # Why did you create this instance?
  creation_reason: "I've created this instance to share videos of the Crypto-Libertarian project."

  # Who is behind the instance? A single person? A non profit?
  # Supports Markdown
  administrator: 'This instance belongs to the [Crypto-Libertarian](https://crypto-libertarian.'

  # How long do you plan to maintain this instance?
  maintenance_lifetime: "Now I'm only testing PeerTube, so there are no guarantees."

  # How will you pay the PeerTube instance server? With your own funds?
  # With users donations? Advertising?
  business_model: 'For now the instance is paid with my own funds.'

  # If you want to explain on what type of hardware your PeerTube instance runs.
  # Example: "2 vCore, 2GB RAM..."
  # Supports Markdown
  hardware_information: '1 vCPU, 1 GB RAM on DigitalOcean.com'

  # What are the main languages of your instance? To interact with your users for example
  # Uncomment or add the languages you want
  # List of supported languages: https://peertube.cpy.re/api/v1/videos/languages
  languages:
    - ru

  # You can specify the main categories of your instance (dedicated to music, gaming or politics etc)
  # Uncomment or add the category ids you want
  # List of supported categories: https://peertube.cpy.re/api/v1/videos/categories
  categories:
    # - 1   # Music
    # - 2   # Films
    # - 3   # Vehicles
    # - 4   # Art
    # - 5   # Sports
    # - 6   # Travels
    # - 7   # Gaming
    # - 8   # People
    # - 9   # Comedy
    # - 10  # Entertainment
    - 11    # News & Politics
    # - 12  # How To
    # - 13  # Education
    - 14    # Activism
    - 15    # Science & Technology
    # - 16  # Animals
    # - 17  # Kids
    # - 18  # Food

  default_client_route: '/videos/trending'

  # Whether or not the instance is dedicated to NSFW content. Enabling it will
  # allow other administrators to know that you are mainly federating sensitive
  # content. Moreover, the NSFW checkbox on video upload will be automatically
  # checked by default.
  is_nsfw: false

  # By default, "do_not_list" or "blur" or "display" NSFW videos.
  # Could be overridden per user with a setting
  default_nsfw_policy: 'do_not_list'

  customizations:
    # Directly your JavaScript code (without <script> tags). Will be eval at runtime
    javascript: ''

    # Directly your CSS code (without <style> tags). Will be injected at runtime
    css: ''

  # Robot.txt rules. To disallow robots to crawl your instance and disallow
  # indexation of your site, add '/' to "Disallow:'.
  robots: |
    User-agent: *
    Disallow:

  # Security.txt rules. To discourage researchers from testing your instance
  # and disable security.txt integration, set this to an empty string.
  securitytxt:
    "# If you would like to report a security issue\n# you may report it to:\nContact: https://github.com/Chocobozzz/PeerTube/blob/develop/SECURITY.md\nContact: mailto:"

services:
  # Cards configuration to format video in Twitter.
  twitter:
    # Indicates the Twitter account for the website or platform on which
    # the content was published.
    username: '@kotovalexarian'

    # If true, a video player will be embedded in the Twitter feed on PeerTube
    # video share. If false, we use an image link card that will redirect
    # on your PeerTube instance. Change it to "true", and then test
    # on https://cards-dev.twitter.com/validator to see if you are whitelisted.
    whitelisted: false

followers:
  instance:
    # Allow or not other instances to follow yours.
    enabled: true

    # Whether or not an administrator must manually validate a new follower.
    manual_approval: false

followings:
  instance:
    # If you want to automatically follow back new instance followers. If this
    # option is enabled, use the mute feature instead of deleting followings.
    # /!\ Don't enable this if you don't have a reactive moderation team /!\
    auto_follow_back:
      enabled: true

    # If you want to automatically follow instances of the public index. If
    # this option is enabled, use the mute feature instead of deleting
    # followings.
    # /!\ Don't enable this if you don't have a reactive moderation team /!\
    auto_follow_index:
      enabled: true

      # Host your own using
      # https://framagit.org/framasoft/peertube/instances-peertube#peertube-auto-follow
      index_url: 'https://instances.joinpeertube.org'

theme:
  default: 'default'
